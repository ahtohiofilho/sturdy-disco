Conte√∫do do arquivo README.md:
# sturdy-disco

# Sphere-Based Civilization Game

> A prototype civilization simulation game rendered on a spherical world, built with modern OpenGL using Python.

This project aims to create a 3D spherical world for strategy and civilization gameplay, using **OpenGL** for rendering and **GLFW** for window and input management. The current implementation provides the foundation for rendering a **polyhedral sphere** (Goldberg G(n,0)) composed of **hexagons and pentagons**, with biome-based coloring and orbit camera controls.

---

## üåç Current State

### ‚úÖ Core Features Implemented:
- **Window Management**:  
  - Fullscreen OpenGL context setup using GLFW  
  - Modular class-based structure (`Window` class)  
  - Graceful shutdown via ESC key  

- **Shader System**:  
  - Class-based shader manager (`Shader`)  
  - Support for dynamic uniform updates (projection/view matrices)  
  - Ready for lighting or texturing extensions  

- **3D Spherical World Rendering**:  
  - Generation of a Goldberg polyhedron (G(2,0)) with 12 pentagons and multiple hexagons  
  - Each polygon is colored according to its biome type (e.g., prairie, ocean, desert)  
  - Rendered using `GL_TRIANGLE_FAN` per face for accurate topology  

- **Camera System**:  
  - Orbit-style camera with yaw/pitch control via keyboard  
  - Dynamic view matrix generation using `pyglm`  

- **Geographic Data Engine**:  
  - Biome classification based on altitude, moisture, and solar incidence  
  - Movement cost and agricultural productivity assigned per biome  
  - Graph-based representation of regions and connections  

- **Modular Architecture**:  
  - Clean separation of concerns across modules:  
    - `contexto.py`: global state and integration point  
    - `renderer.py`: rendering pipeline  
    - `geografia.py`: geography engine  
    - `poligonos.py`: polyhedron geometry generator  

---

## üéØ Future Goals

- [ ] Add interactive UI for selecting provinces  
- [ ] Implement resource management and civilization mechanics  
- [ ] Enable smooth zoom and continuous rotation
- [ ] Export map as JSON or SVG  

---

## üß∞ Dependencies

Install required packages using pip:

```bash
pip install glfw PyOpenGL networkx numpy pyglm

## üìÅ Project Structure

sturdy-disco/
‚îú‚îÄ‚îÄ main.py # Entry point: creates Window instance and runs the app
‚îú‚îÄ‚îÄ contexto.py # Central Context object that holds geografia, camera, and renderer
‚îú‚îÄ‚îÄ window.py # Manages GLFW lifecycle and input callbacks
‚îú‚îÄ‚îÄ rendering/
‚îÇ ‚îú‚îÄ‚îÄ shader.py # Shader compilation and usage logic
‚îÇ ‚îú‚îÄ‚îÄ renderer.py # Renderer class with VAO/VBO and draw loop
‚îÇ ‚îî‚îÄ‚îÄ buffers.py # Buffer preparation for OpenGL
‚îú‚îÄ‚îÄ utils/
‚îÇ ‚îú‚îÄ‚îÄ polygons.py # Generates 3D coordinates for polyhedron faces
‚îÇ ‚îî‚îÄ‚îÄ geography.py # Biome assignment, graph definition, and node metadata
‚îî‚îÄ‚îÄ shaders/
‚îú‚îÄ‚îÄ render_vs.glsl # Vertex shader with projection/view uniforms
‚îú‚îÄ‚îÄ render_fs.glsl # Fragment shader with flat color output
‚îú‚îÄ‚îÄ picking_vs.glsl # Vertex shader for polygon selection (unique color pass)
‚îî‚îÄ‚îÄ picking_fs.glsl # Fragment shader that assigns unique RGB color per polygon

Conte√∫do do arquivo main.py:
# main.py

from window import Window
from contexto import Contexto

if __name__ == "__main__":
    contexto = Contexto()
    contexto.window = Window("Sturdy Disco", contexto)
    contexto.window.run()


Conte√∫do do arquivo window.py:
# window.py

import glfw
from OpenGL.GL import *
import sys
from rendering.renderer import Renderer
from camera import Camera
import moderngl as mgl

class Window:
    def __init__(self, title, contexto):
        self.title = title
        self.window = None
        self.contexto = contexto
        self.keys = {}
        self.renderer = None

        # Inicializa a c√¢mera aqui, usando o fator do contexto
        self.camera = Camera(
            fator=contexto.fator,
            position=[0, 0, 1],
            target=[0, 0, 0],
            aspect_ratio=16/9  # Valor padr√£o (ser√° atualizado ap√≥s criar a janela)
        )
        contexto.camera = self.camera  # Atualiza o contexto com a c√¢mera criada

    def key_callback(self, window, key, scancode, action, mods):
        if key == glfw.KEY_UP or key == glfw.KEY_DOWN or key == glfw.KEY_LEFT or key == glfw.KEY_RIGHT or key == glfw.KEY_ESCAPE:
            self.keys[key] = action != glfw.RELEASE

    def mouse_callback(self, window, button, action, mods):
        if button == glfw.MOUSE_BUTTON_LEFT and action == glfw.PRESS:
            x, y = glfw.get_cursor_pos(window)
            width, height = glfw.get_framebuffer_size(window)
            key = self.read_pixel_at(x, y, width, height)
            if key is not None:
                self.show_province_menu(key)

    def read_pixel_at(self, x, y, width, height):
        glBindFramebuffer(GL_FRAMEBUFFER, self.renderer.picking_fbo)

        px = int(x)
        py = int(height - y - 1)

        # Garante que as coordenadas est√£o dentro da tela
        px = max(0, min(px, width - 1))
        py = max(0, min(py, height - 1))

        data = glReadPixels(px, py, 1, 1, GL_RGB, GL_FLOAT)
        glBindFramebuffer(GL_FRAMEBUFFER, 0)

        # Aqui est√° a corre√ß√£o: garante que data tem os 3 valores RGB
        if len(data.shape) == 3 and data.shape[0] == 1 and data.shape[1] == 1 and data.shape[2] == 3:
            r, g, b = data[0][0]
        elif len(data) == 3:
            r, g, b = data
        else:
            print(f"Erro ao ler pixel: dado inv√°lido retornado {data}")
            return None
        
        # Adiciona condi√ß√£o para ignorar pixels pretos (fora do planeta)
        if r < 0.01 and g < 0.01 and b < 0.01:
            return None

        id = int(r * 255) + int(g * 255) * 256 + int(b * 255) * 256 * 256
        nodes = list(self.contexto.planeta.geografia.nodes.keys())

        if id >= len(nodes):
            print(f"[ERRO] ID {id} fora do intervalo. Total de n√≥s: {len(nodes)}")
            return None

        return nodes[id]
        
    def show_province_menu(self, key):
        self.contexto.selected_province = key

    def init_glfw(self):
        if not glfw.init():
            print("Erro: n√£o foi poss√≠vel inicializar o GLFW.")
            return False

        monitor = glfw.get_primary_monitor()
        video_mode = glfw.get_video_mode(monitor)
        self.window = glfw.create_window(video_mode.size.width, video_mode.size.height, self.title, monitor, None)

        if not self.window:
            print("Erro: falha ao criar a janela GLFW.")
            glfw.terminate()
            return False

        glfw.make_context_current(self.window)

        self.ctx_mgl = mgl.create_context()
        self.contexto.ctx_mgl = self.ctx_mgl
        
        # Atualiza o aspect ratio da c√¢mera com o tamanho real da janela
        self.width, self.height = glfw.get_framebuffer_size(self.window)
        self.camera.aspect_ratio = self.width / self.height if self.height != 0 else 16/9
        
        # Configura callbacks
        glfw.set_key_callback(self.window, self.key_callback)
        glfw.set_mouse_button_callback(self.window, self.mouse_callback)

        return True

    def run(self):
        if not self.init_glfw():
            sys.exit(1)

        try:
            self.main_loop()
        finally:
            self.cleanup()

    def cleanup(self):
        if self.window:
            glfw.destroy_window(self.window)
        glfw.terminate()

    def main_loop(self):
        glClearColor(0.0, 0.0, 0.0, 1.0)
        glEnable(GL_DEPTH_TEST)

        # Inicializa o renderer com o contexto
        self.renderer = Renderer(self.contexto)
        last_time = glfw.get_time()

        self.renderer.init_picking_framebuffer(self.width, self.height)

        while not glfw.window_should_close(self.window):
            glClearColor(0.0, 0.0, 0.0, 1.0)
            current_time = glfw.get_time()
            delta_time = current_time - last_time
            last_time = current_time

            # Movimento cont√≠nuo da c√¢mera
            camera = self.contexto.camera
            sensitivity = 1.0

            if self.keys.get(glfw.KEY_UP):
                camera.rotate_pitch(sensitivity * delta_time * 100)
            if self.keys.get(glfw.KEY_DOWN):
                camera.rotate_pitch(-sensitivity * delta_time * 100)
            if self.keys.get(glfw.KEY_LEFT):
                camera.rotate_yaw(sensitivity * delta_time * 100)
            if self.keys.get(glfw.KEY_RIGHT):
                camera.rotate_yaw(-sensitivity * delta_time * 100)

            # Detecta ESC e fecha a janela
            if self.keys.get(glfw.KEY_ESCAPE):
                glfw.set_window_should_close(self.window, True)

            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

            # Atualiza c√¢mera (ex: view matrix)
            self.contexto.camera.update()
            self.renderer.render_picking_pass()
            glBindFramebuffer(GL_FRAMEBUFFER, 0)

            # Renderiza os pol√≠gonos via Renderer
            self.renderer.render()

            # Renderiza√ß√£o do HUD com moderngl
            self.renderer.render_hud()

            glfw.swap_buffers(self.window)
            glfw.poll_events()

Conte√∫do do arquivo unidade.py:
# unidade.py
class Unidade:
    def __init__(self, tipo, local, civilizacao):
        self.tipo = tipo
        self.local = local
        self.civilizacao = civilizacao
        self.vida = 100
        self.movimento = 2  # n√∫mero de passos por turno

    def mover_para(self, destino):
        if self.movimento > 0:
            self.local = destino
            self.movimento -= 1
        else:
            print("Sem movimentos restantes.")

    def coletar_recurso(self, recurso, quantidade):
        # Exemplo simples de coleta
        print(f"{self.tipo} coletou {quantidade} de {recurso}.")

Conte√∫do do arquivo provincia.py:
import numpy as np
from nomenclaturas import formar_nome

class Provincia:
    def __init__(self, civilizacao, planeta, coordenadas):
        self.civilizacao = civilizacao
        self.coordenadas = coordenadas
        self.produtividade_agricultura = planeta.geografia.nodes[coordenadas]['prod_agric']
        self.bioma = planeta.geografia.nodes[coordenadas]['bioma']
        self.placa = planeta.geografia.nodes[coordenadas]['placa']
        self.nome = formar_nome(civilizacao.cultura)
        self.capital_humano = 1

Conte√∫do do arquivo planeta.py:
# planeta.py
from utils.poligonos import dicionario_poligonos
from utils.geografia import definir_geografia
from civilizacao import Civilizacao
from networkx import shortest_path_length
from random import choice, sample

class Planeta:
    def __init__(self, contexto):
        self.poligonos = dicionario_poligonos(contexto.fator)
        self.geografia, self.num_civs = definir_geografia(self.poligonos, contexto.fator)
        self.civilizacoes = []

        prados = [n for n, attr in self.geografia.nodes(data=True) if attr['bioma'] == 'prado']
        self.lista_capitais = [choice(prados)]
        while len(self.lista_capitais) < self.num_civs:
            d2 = {}
            for candidato in prados:
                if candidato in self.lista_capitais:
                    continue
                d = {}
                for capital in self.lista_capitais:
                    d[capital] = shortest_path_length(self.geografia, source=candidato, target=capital, weight='custo_mobilidade')
                d2[candidato] = min(d.values())
            if not d2:  # Se n√£o houver candidatos poss√≠veis, o planeta n√£o comporta a quantidade desejada
                print("d2 vazio")
                raise ValueError("O planeta n√£o comporta essa quantidade de civiliza√ß√µes!")
            maior_valor = max(d2.values())
            chaves_maior_valor = [chave for chave, valor in d2.items() if valor == maior_valor]
            self.lista_capitais.append(choice(chaves_maior_valor))
        print(f"Lista de capitais: {self.lista_capitais}")
        self.civilizacoes = {}
        self.culturas = [
            'English', 'Chinese', 'Spanish',
            'French', 'Indian', 'Russian',
            'Vietnamese', 'Turkish', 'Arabic',
            'Indonesian', 'Persian', 'Hausa',
            'Swahili', 'Portuguese', 'Telugu',
            'Bengali', 'Japanese', 'Marathi',
            'Wu', 'Yue', 'Min',
            'Korean', 'Italian', 'German'
        ]
        self.civs_cores = {
            'Black': (16, 16, 16), 'Midnight Blue': (0, 0, 127), 'Blue': (0, 0, 255),
            'Dark Green': (0, 127, 0), 'Teal': (0, 127, 127), 'Sky Blue': (32, 127, 223),
            'Green': (0, 255, 0), 'Spring Green': (0, 255, 127), 'Cyan': (0, 223, 223),
            'Maroon': (127, 0, 0), 'Purple': (127, 0, 127), 'Violet': (127, 0, 255),
            'Olive': (127, 127, 0), 'Gray': (127, 127, 127), 'Lavender': (127, 127, 255),
            'Chartreuse': (127, 255, 0), 'Light Green': (127, 223, 127), 'Pale Cyan': (127, 255, 255),
            'Red': (234, 33, 37), 'Rose': (255, 0, 127), 'Magenta': (255, 0, 255),
            'Orange': (223, 127, 32), 'Salmon': (255, 127, 127), 'Orchid': (255, 127, 255),
            'Yellow': (255, 255, 0), 'Light Yellow': (255, 255, 127), 'White': (250, 255, 253)
        }
        for _ in range(self.num_civs):
            civilizacao = Civilizacao(self)
            self.civilizacoes[civilizacao.nome] = civilizacao

        self.circulo_civilizacoes = sample(list(self.civilizacoes.values()), len(self.civilizacoes))
        # Define as rela√ß√µes de inimizade iniciais
        self.definir_inimigos()
        self.rodada = 0

    def definir_inimigos(self):
        """Define as rela√ß√µes de inimizade entre as civiliza√ß√µes no c√≠rculo."""
        n = len(self.circulo_civilizacoes)
        for i in range(n):
            civ_atual = self.circulo_civilizacoes[i]
            civ_esquerda = self.circulo_civilizacoes[(i - 1) % n]  # Civiliza√ß√£o √† esquerda
            civ_direita = self.circulo_civilizacoes[(i + 1) % n]   # Civiliza√ß√£o √† direita

            # Define as civiliza√ß√µes adjacentes como inimigas
            civ_atual.inimigos = {civ_esquerda.nome: civ_esquerda, civ_direita.nome: civ_direita}

Conte√∫do do arquivo contexto.py:
from planeta import Planeta

class Contexto:
    def __init__(self, fator=5):
        self.fator = fator
        self.planeta = Planeta(self)
        self.ctx_mgl = None
        self.selected_province = None

Conte√∫do do arquivo civilizacao.py:
# civilizacao.py
from random import shuffle, choice, randint
from provincia import Provincia
import os
from OpenGL.GL import *
import pygame
from bandeiras import bandeira

class Civilizacao:
    def __init__(self, planeta):
        self.planeta = planeta
        if planeta.culturas:
            shuffle(planeta.culturas)
            self.cultura = planeta.culturas.pop()
        else:
            planeta.culturas = [
                'English', 'Chinese', 'Spanish',
                'French', 'Indian', 'Russian',
                'Vietnamese', 'Turkish', 'Arabic',
                'Indonesian', 'Persian', 'Hausa',
                'Swahili', 'Portuguese', 'Telugu',
                'Bengali', 'Japanese', 'Marathi',
                'Wu', 'Yue', 'Min',
                'Korean', 'Italian', 'German'
            ]
            shuffle(planeta.culturas)
            self.cultura = planeta.culturas.pop()

        tons_de_pele = [(245, 212, 205), (212, 160, 147), (163, 106, 95), (101, 61, 53)]
        tons_de_cabelo = [(209, 195, 2), (140, 106, 0), (99, 55, 26), (52, 48, 47)]
        self.pele = choice(tons_de_pele)
        self.cabelo = choice(tons_de_cabelo)
        self.nome = choice(list(planeta.civs_cores.keys()))
        self.cor = planeta.civs_cores[self.nome]
        del planeta.civs_cores[self.nome]
        self.bandeira_nome = self.nome
        self.bandeira_modalidade = randint(0, 82)
        shuffle(planeta.lista_capitais)
        self.ponto_inicial = planeta.lista_capitais.pop()
        self.provincias = {}
        self.adicionar_provincia(planeta, self.ponto_inicial)
        self.unidades = []
        self.gerar_bandeira()
        self.textura_bandeira = self.carregar_bandeira_opengl()

    def adicionar_provincia(self, planeta, coordenadas):
        """Cria uma nova prov√≠ncia e adiciona ao dicion√°rio de prov√≠ncias."""
        # Cria a prov√≠ncia
        provincia = Provincia(self, planeta, coordenadas)
        self.provincias[coordenadas] = provincia

        # Adiciona a informa√ß√£o da civiliza√ß√£o ao n√≥ correspondente no grafo
        if coordenadas in planeta.geografia.nodes:
            planeta.geografia.nodes[coordenadas]['civilizacao'] = self
        else:
            # Se o n√≥ n√£o existir no grafo, adiciona-o com a informa√ß√£o da civiliza√ß√£o
            planeta.geografia.add_node(coordenadas, civilizacao=self)

        return provincia
    
    def gerar_bandeira(self):
        """Gera a bandeira da civiliza√ß√£o e salva no disco se ainda n√£o existir."""
        caminho = f"assets/imagens/bandeiras_civilizacoes/{self.bandeira_nome}.png"

        if not os.path.exists(caminho):
            bandeira_surface = bandeira(self.bandeira_nome, self.bandeira_modalidade)  # Gera a bandeira
            pygame.image.save(bandeira_surface, caminho)  # Salva no disco

    def carregar_bandeira_opengl(self):
        """Carrega a bandeira salva no disco como textura OpenGL."""
        caminho = os.path.join("assets/imagens/bandeiras_civilizacoes", f"{self.bandeira_nome}.png")
        
        bandeira_surface = pygame.image.load(caminho)  # Carrega a imagem gerada
        texture_id = glGenTextures(1)  # Cria uma textura OpenGL
        glBindTexture(GL_TEXTURE_2D, texture_id)  # Ativa a textura
        
        # Extrai os pixels da superf√≠cie
        pixels = pygame.image.tostring(bandeira_surface, "RGBA", True)

        # Configura a textura no OpenGL
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA,
                    bandeira_surface.get_width(), bandeira_surface.get_height(),
                    0, GL_RGBA, GL_UNSIGNED_BYTE, pixels)

        glGenerateMipmap(GL_TEXTURE_2D)  # Gera mipmaps para otimizar visualiza√ß√£o
        return texture_id


Conte√∫do do arquivo camera.py:
# camera.py
import numpy as np
from math import sin, cos, radians, pi
import glm
import glfw
import math

class Camera:
    def __init__(self, fator, position=(0, 0, 5), target=(0, 0, 0), up=(0, 1, 0), 
                 aspect_ratio=16/9):
        self.target = np.array(target, dtype=np.float32)
        self.world_up = np.array(up, dtype=np.float32)
        self.yaw = -90.0   # Olhando para +z inicialmente
        self.pitch = 0.0
        self.speed = 0.5
        self.sensitivity = 0.3
        self.aspect_ratio = aspect_ratio
        self.distancia_inicial = 4

        # Calcula o raio do planeta com base no fator
        self.raio_planeta = fator / (2 * math.sin(math.pi / 5))

        # Define posi√ß√£o inicial baseada em m√∫ltiplos do raio
        distance = self.distancia_inicial * self.raio_planeta
        self.position = np.array([0, 0, distance], dtype=np.float32)

        # Obter propor√ß√£o da tela
        self.aspect_ratio = self.get_screen_aspect_ratio() or 16 / 9

        # Inicializa vetores de c√¢mera
        self.front = np.array([0.0, 0.0, 0.0])
        self.right = np.array([0.0, 0.0, 0.0])
        self.up = np.array([0.0, 0.0, 0.0])

        # Atualiza vetores com base na posi√ß√£o inicial
        self.update()
        self._update_position_from_angles()

    @staticmethod
    def get_screen_aspect_ratio():
        if not glfw.init():
            print("Erro ao inicializar GLFW")
            return None

        # Criar uma janela tempor√°ria para obter informa√ß√µes
        glfw.window_hint(glfw.VISIBLE, False)  # Ocultar a janela
        window = glfw.create_window(800, 600, "Temp", None, None)

        if not window:
            print("Erro ao criar janela GLFW")
            glfw.terminate()
            return None

        glfw.make_context_current(window)
        width, height = glfw.get_framebuffer_size(window)
        glfw.destroy_window(window)
        glfw.terminate()

        return width / height

    def get_view_matrix(self):
        return glm.lookAt(
            glm.vec3(*self.position),
            glm.vec3(*self.target),
            glm.vec3(*self.world_up)
        )

    def get_projection_matrix(self):
        return glm.perspective(
            glm.radians(45.0), 
            self.aspect_ratio, 
            0.1, 
            (self.distancia_inicial + 1) * self.raio_planeta * 10  # Ajuste o far plane
        )

    def update(self):
        front = np.array([
            cos(radians(self.yaw)) * cos(radians(self.pitch)),
            sin(radians(self.pitch)),
            sin(radians(self.yaw)) * cos(radians(self.pitch))
        ])
        self.front = front / np.linalg.norm(front)
        self.right = np.cross(self.front, self.world_up)
        self.right /= np.linalg.norm(self.right)
        self.up = np.cross(self.right, self.front)
        self.up /= np.linalg.norm(self.up)

    def rotate_yaw(self, angle):
        self.yaw += angle
        self.update()
        self._update_position_from_angles()

    def rotate_pitch(self, angle):
        self.pitch = np.clip(self.pitch + angle, -89.0, 89.0)
        self.update()
        self._update_position_from_angles()

    def _update_position_from_angles(self):
        radius = np.linalg.norm(self.position - self.target)
        self.position = self.target + np.array([
            cos(radians(self.yaw)) * cos(radians(self.pitch)),
            sin(radians(self.pitch)),
            sin(radians(self.yaw)) * cos(radians(self.pitch))
        ]) * radius

    def _look_at(self, eye, center, up):
        f = (center - eye)
        f /= np.linalg.norm(f)
        s = np.cross(f, up)
        s /= np.linalg.norm(s)
        u = np.cross(s, f)
        u /= np.linalg.norm(u)

        view = np.identity(4, dtype=np.float32)
        view[0, :3] = s
        view[1, :3] = u
        view[2, :3] = -f
        view[:3, 3] = -np.dot(s, eye), -np.dot(u, eye), np.dot(f, eye)
        return view

Conte√∫do do arquivo buffers.py:
# rendering/buffers.py

import numpy as np

def prepare_buffers(contexto):
    vertices = []
    colors = []
    polygon_types = []

    for key in contexto.planeta.geografia.nodes:
        try:
            verts = contexto.planeta.poligonos[key]
        except KeyError:
            continue

        node_data = contexto.planeta.geografia.nodes[key]
        color = node_data.get('cor_bioma', (255, 255, 255))
        r, g, b = [c / 255.0 for c in color]

        polygon_types.append(len(verts))  # salva quantos v√©rtices esse poligono tem

        for v in verts:
            vertices.extend(v)
            colors.extend([r, g, b])

    return (
        np.array(vertices, dtype=np.float32),
        np.array(colors, dtype=np.float32),
        polygon_types
    )

Conte√∫do do arquivo renderer.py:
# rendering/renderer.py
from OpenGL.GL import *
import numpy as np
from rendering.buffers import prepare_buffers
from rendering.shader import Shader
import glm
import glfw
from utils.font_renderer import FontRenderer

class Renderer:
    def __init__(self, contexto):
        self.contexto = contexto
        self.vao = None
        self.vertex_count = 0
        self.polygon_types = []
        self.render_shader = None
        self.picking_shader = None
        self.border_shader = None

        self.ubuntu_font = FontRenderer("assets/fonts/ubuntu_mono_atlas.png")


        # Inicializa shaders e buffers
        self.setup()
        self.init_picking_framebuffer(contexto.window.width, contexto.window.height)

    def init_picking_framebuffer(self, width, height):
        self.picking_fbo = glGenFramebuffers(1)
        glBindFramebuffer(GL_FRAMEBUFFER, self.picking_fbo)

        # Textura do picking
        self.picking_texture = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, self.picking_texture)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB32F, width, height, 0, GL_RGB, GL_FLOAT, None)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, self.picking_texture, 0)

        # Renderbuffer para profundidade
        self.depth_rb = glGenRenderbuffers(1)
        glBindRenderbuffer(GL_RENDERBUFFER, self.depth_rb)
        glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT, width, height)
        glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, self.depth_rb)

        glBindFramebuffer(GL_FRAMEBUFFER, 0)

    def render_picking_pass(self):
        glBindFramebuffer(GL_FRAMEBUFFER, self.picking_fbo)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        self.picking_shader.use()

        # Obter tamanho da janela para aspect ratio
        window_size = glfw.get_framebuffer_size(glfw.get_current_context())
        if window_size[1] == 0:
            aspect = 1.0
        else:
            aspect = window_size[0] / window_size[1]

        # Criar matriz de proje√ß√£o perspectiva com pyglm
        projection = glm.perspective(glm.radians(45.0), aspect, 0.1, 100.0)
        view = self.contexto.camera.get_view_matrix()

        # Passar uniforms
        proj_loc = glGetUniformLocation(self.picking_shader.program, "projection")
        view_loc = glGetUniformLocation(self.picking_shader.program, "view")

        if proj_loc != -1:
            glUniformMatrix4fv(proj_loc, 1, GL_FALSE, glm.value_ptr(projection))
        if view_loc != -1:
            glUniformMatrix4fv(view_loc, 1, GL_FALSE, glm.value_ptr(view))

        # Desenhar v√©rtices
        glBindVertexArray(self.vao)
        offset = 0
        for i, sides in enumerate(self.polygon_types):
            r = ((i >> 0) & 0xFF) / 255.0
            g = ((i >> 8) & 0xFF) / 255.0
            b = ((i >> 16) & 0xFF) / 255.0
            glUniform3f(glGetUniformLocation(self.picking_shader.program, "picking_color"), r, g, b)

            mode = GL_TRIANGLE_FAN if sides == 5 or sides == 6 else GL_TRIANGLES
            glDrawArrays(mode, offset, sides)
            offset += sides

        glBindVertexArray(0)
        self.picking_shader.unuse()

    def setup(self):
        try:
            # Carregar shaders normais
            with open("shaders/render_vs.glsl", "r") as f:
                vertex_source = f.read()
            with open("shaders/render_fs.glsl", "r") as f:
                fragment_source = f.read()

            # Carregar shaders de picking
            with open("shaders/picking_vs.glsl", "r") as f:
                picking_vertex_source = f.read()
            with open("shaders/picking_fs.glsl", "r") as f:
                picking_fragment_source = f.read()

            # Carregar shaders de borda
            with open("shaders/border_vs.glsl", "r") as f:
                border_vertex_source = f.read()
            with open("shaders/border_fs.glsl", "r") as f:
                border_fragment_source = f.read()

        except FileNotFoundError as e:
            print(f"Erro: Arquivo de shader n√£o encontrado - {e}")
            raise

        if not all([vertex_source, fragment_source, picking_vertex_source, picking_fragment_source]):
            raise ValueError("Fonte do shader n√£o pode ser vazia.")

        # Compilar dois shaders distintos
        self.render_shader = Shader(vertex_source, fragment_source)
        self.picking_shader = Shader(picking_vertex_source, picking_fragment_source)
        self.border_shader = Shader(border_vertex_source, border_fragment_source)

        # Preparar buffers (agora retorna tamb√©m civ_colors)
        vertices, colors, civ_colors, self.polygon_types = prepare_buffers(self.contexto)
        self.vertex_count = len(vertices) // 3

        # Configurar VAO/VBOs
        self.vao = glGenVertexArrays(1)
        glBindVertexArray(self.vao)

        # VBO de v√©rtices
        vbo_vertices = glGenBuffers(1)
        glBindBuffer(GL_ARRAY_BUFFER, vbo_vertices)
        glBufferData(GL_ARRAY_BUFFER, vertices.nbytes, vertices, GL_STATIC_DRAW)
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
        glEnableVertexAttribArray(0)

        # VBO de cores dos biomas
        vbo_colors = glGenBuffers(1)
        glBindBuffer(GL_ARRAY_BUFFER, vbo_colors)
        glBufferData(GL_ARRAY_BUFFER, colors.nbytes, colors, GL_STATIC_DRAW)
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, None)
        glEnableVertexAttribArray(1)

        # VBO de cores das civiliza√ß√µes
        vbo_civ_colors = glGenBuffers(1)
        glBindBuffer(GL_ARRAY_BUFFER, vbo_civ_colors)
        glBufferData(GL_ARRAY_BUFFER, civ_colors.nbytes, civ_colors, GL_STATIC_DRAW)
        glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 0, None)
        glEnableVertexAttribArray(2)

        glBindVertexArray(0)

    def render(self):
    # --- RENDERIZA√á√ÉO PRINCIPAL ---
        self.render_shader.use()

        # Obter tamanho da janela para aspect ratio
        window_size = glfw.get_framebuffer_size(glfw.get_current_context())
        if window_size[1] == 0:
            aspect = 1.0
        else:
            aspect = window_size[0] / window_size[1]

        # Criar matriz de proje√ß√£o perspectiva com pyglm
        projection = glm.perspective(glm.radians(45.0), aspect, 0.1, 100.0)

        # Obter view matrix da c√¢mera
        view = self.contexto.camera.get_view_matrix()

        # Passar as matrizes para o shader
        proj_loc = glGetUniformLocation(self.render_shader.program, "projection")
        view_loc = glGetUniformLocation(self.render_shader.program, "view")

        if proj_loc != -1:
            glUniformMatrix4fv(proj_loc, 1, GL_FALSE, glm.value_ptr(projection))
        if view_loc != -1:
            glUniformMatrix4fv(view_loc, 1, GL_FALSE, glm.value_ptr(view))

        # Desenhar os pol√≠gonos individualmente
        glBindVertexArray(self.vao)
        offset = 0
        for sides in self.polygon_types:
            mode = GL_TRIANGLE_FAN if sides == 5 or sides == 6 else GL_TRIANGLES
            glDrawArrays(mode, offset, sides)
            offset += sides

        glBindVertexArray(0)
        self.render_shader.unuse()

        # --- RENDERIZA√á√ÉO DAS BORDAS ---
        self.border_shader.use()
        glUniformMatrix4fv(glGetUniformLocation(self.border_shader.program, "projection"), 1, GL_FALSE, glm.value_ptr(projection))
        glUniformMatrix4fv(glGetUniformLocation(self.border_shader.program, "view"), 1, GL_FALSE, glm.value_ptr(view))

        glLineWidth(3.0)  # Espessura da linha da borda
        glBindVertexArray(self.vao)
        offset = 0
        for sides in self.polygon_types:
            glDrawArrays(GL_LINE_LOOP, offset, sides)  # Desenha borda como linha fechada
            offset += sides
        glBindVertexArray(0)

    def render_hud(self):
        # Desenha apenas se houver prov√≠ncia selecionada
        if hasattr(self.contexto, 'selected_province') and self.contexto.selected_province:
            node_data = self.contexto.planeta.geografia.nodes[self.contexto.selected_province]
            lines = [
                f"Province: {self.contexto.selected_province}",
                f"Biome: {node_data.get('bioma', 'N/A')}",
                f"Temperature: {node_data.get('temperatura', 'N/A')} ¬∞C",
                f"Elevation: {node_data.get('altitude', 'N/A')}",
                f"Humidity: {node_data.get('umidade', 'N/A')}"
            ]

            # Garante que estamos usando a proje√ß√£o ortogr√°fica
            self.ubuntu_font.prepare_ortho()

            # Posi√ß√£o inicial do texto
            x, y = 20, 20

            # Escala padr√£o
            scale = 0.5

            # Desenha linha por linha
            for i, line in enumerate(lines):
                self.ubuntu_font.draw_text(x, y + i * 25, line, scale)

Conte√∫do do arquivo picking_fs.glsl:
#version 330 core
uniform vec3 picking_color;

out vec4 outColor;

void main() {
    outColor = vec4(picking_color, 1.0);
}

Conte√∫do do arquivo picking_vs.glsl:
#version 330 core
layout(location = 0) in vec3 position;
uniform mat4 projection;
uniform mat4 view;

out vec3 fragPickingColor;  // N√£o usado aqui, mas pode ser √∫til no futuro

void main() {
    gl_Position = projection * view * vec4(position, 1.0);
}

Conte√∫do do arquivo render_fs.glsl:
#version 330 core
in vec3 fragColor;
out vec4 outColor;

void main() {
    outColor = vec4(fragColor, 1.0);
}

Conte√∫do do arquivo render_vs.glsl:
#version 330 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 color;

out vec3 fragColor;

uniform mat4 view;
uniform mat4 projection;

void main() {
    gl_Position = projection * view * vec4(position, 1.0);
    fragColor = color;
}

Conte√∫do do arquivo font_renderer.py:
# utils/font_renderer.py
import numpy as np
from OpenGL.GL import *
from PIL import Image
import glm
from rendering.shader import Shader
import glfw

class FontRenderer:
    def __init__(self, font_texture_path, char_width=16, char_height=32):
        self.char_width = char_width
        self.char_height = char_height
        self.texture_id = self._load_texture(font_texture_path)
        self.shader = self._init_shader()
        self.vao, self.vbo = self._init_buffers()
        self.buffer_size = 0

    def _load_texture(self, path):
        img = Image.open(path).convert("RGBA")
        img = img.transpose(Image.FLIP_TOP_BOTTOM)
        self.tex_width, self.tex_height = img.size

        texture_id = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, texture_id)
        glTexImage2D(
            GL_TEXTURE_2D, 0, GL_RGBA,
            self.tex_width, self.tex_height, 0,
            GL_RGBA, GL_UNSIGNED_BYTE, img.tobytes()
        )
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
        return texture_id

    def _init_shader(self):
        vertex_src = """
        #version 330 core
        layout(location = 0) in vec2 position;
        layout(location = 1) in vec2 texcoord;
        out vec2 uv;
        uniform mat4 projection;
        void main() {
            uv = texcoord;
            gl_Position = projection * vec4(position, 0.0, 1.0);
        }
        """
        fragment_src = """
        #version 330 core
        in vec2 uv;
        out vec4 color;
        uniform sampler2D font_atlas;
        void main() {
            color = texture(font_atlas, uv);
        }
        """
        return Shader(vertex_src, fragment_src)  # Usa sua classe Shader!

    def _init_buffers(self):
        vao = glGenVertexArrays(1)
        vbo = glGenBuffers(1)
        glBindVertexArray(vao)
        glBindBuffer(GL_ARRAY_BUFFER, vbo)
        
        self.buffer_size = 0
        glBufferData(GL_ARRAY_BUFFER, self.buffer_size, None, GL_DYNAMIC_DRAW)
        
        # Atributos: posi√ß√£o (xy) + texcoord (uv)
        glEnableVertexAttribArray(0)
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 16, ctypes.c_void_p(0))
        glEnableVertexAttribArray(1)
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 16, ctypes.c_void_p(8))
        
        glBindVertexArray(0)
        return vao, vbo
    
    def prepare_ortho(self):
        width, height = glfw.get_framebuffer_size(glfw.get_current_context())
        projection = glm.ortho(0, width, height, 0, -1, 1)
        self.shader.use()
        self.shader.set_uniform("projection", projection)

    def draw_text(self, x, y, text, scale=1.0):
        vertices = []
        for char in text:
            if char == ' ':  # Pula espa√ßos
                x += self.char_width * scale
                continue

            ascii_val = ord(char)

            # Se o caractere n√£o estiver no atlas, pule
            if ascii_val < 32 or ascii_val > 126:
                x += self.char_width * scale
                continue

            # Calcula posi√ß√£o no atlas (sempre na linha 0)
            col = ascii_val - 32  # subtrai offset do primeiro caractere (espa√ßo)

            # Coordenadas UV
            u0 = col * self.char_width / self.tex_width
            v0 = 0  # primeira linha
            u1 = u0 + self.char_width / self.tex_width
            v1 = 1.0  # altura total da imagem

            w = self.char_width * scale
            h = self.char_height * scale

            # Adiciona v√©rtices do quad (x, y, u, v)
            vertices.extend([
                x,     y,     u0, v1,
                x + w, y,     u1, v1,
                x + w, y + h, u1, v0,
                x,     y + h, u0, v0,
            ])
            x += w

        if not vertices:
            return
        
        # Converter para array numpy
        vertex_data = np.array(vertices, dtype=np.float32)
        required_size = vertex_data.nbytes  # Tamanho necess√°rio em bytes

        glBindBuffer(GL_ARRAY_BUFFER, self.vbo)

        # Verificar se o buffer precisa ser redimensionado
        if required_size > self.buffer_size:
            # Realocar o buffer com o novo tamanho
            glBufferData(GL_ARRAY_BUFFER, required_size, vertex_data, GL_DYNAMIC_DRAW)
            self.buffer_size = required_size
        else:
            # Atualizar apenas os dados existentes
            glBufferSubData(GL_ARRAY_BUFFER, 0, required_size, vertex_data)

        # Upload dos v√©rtices para o VBO
        glBindBuffer(GL_ARRAY_BUFFER, self.vbo)
        glBufferSubData(GL_ARRAY_BUFFER, 0, np.array(vertices, dtype=np.float32))

        # Configura estado de renderiza√ß√£o
        glDisable(GL_DEPTH_TEST)
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

        # Ativa shader e textura
        self.shader.use()
        glActiveTexture(GL_TEXTURE0)
        glBindTexture(GL_TEXTURE_2D, self.texture_id)
        self.shader.set_uniform("font_atlas", 0)

        # Configura proje√ß√£o ortogr√°fica
        width, height = glfw.get_framebuffer_size(glfw.get_current_context())
        projection = glm.ortho(0, width, height, 0, -1, 1)
        self.shader.set_uniform("projection", projection)

        # Renderiza
        glBindVertexArray(self.vao)
        glDrawArrays(GL_QUADS, 0, len(vertices) // 4)

        # Restaura estado
        glEnable(GL_DEPTH_TEST)
        glDisable(GL_BLEND)

Conte√∫do do arquivo requirements.txt:
glcontext==3.0.0
glfw==2.9.0
moderngl==5.12.0
networkx==3.4.2
numpy==2.2.6
pillow==11.2.1
pygame==2.6.1
pyglm==2.8.2
PyOpenGL==3.1.9
PyOpenGL-accelerate==3.1.9


